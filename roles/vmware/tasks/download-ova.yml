---
- name: Create images dir if not exists
  ansible.builtin.file:
    path: '{{ playbook_dir }}/images'
    state: directory
    mode: u=rwx,g=rwx,o=rwx
  delegate_to: localhost
  register: IMAGES_DIR

- name: Clean up checksum file from local storage
  ansible.builtin.file:
    path: "{{ CLOUD_IMAGE_CHECKSUM_DESTINATION }}"
    state: 'absent'

- name: Download OVA Checksum file locally
  ansible.builtin.get_url:
    url: "{{ CLOUD_IMAGE_CHECKSUM_URL }}"
    dest: "{{ CLOUD_IMAGE_CHECKSUM_DESTINATION }}"
    mode: u=rw,g=r,o=r

- name: Get checksum for {{ CLOUD_IMAGE_NAME }}
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      grep {{ CLOUD_IMAGE_NAME }} {{ CLOUD_IMAGE_CHECKSUM_DESTINATION }} | cut -d ' ' -f 1
    executable: /bin/bash
  register: CLOUD_IMAGE_CHECKSUM
  changed_when: CLOUD_IMAGE_CHECKSUM.rc != 0

- name: Get OVA checksum
  ansible.builtin.stat:
    path: "{{ CLOUD_IMAGE_DESTINATION }}"
    checksum_algorithm: sha256
    get_checksum: true
  register: CLOUD_IMAGE_CHECKSUM_STAT

- name: Compare OVA checksum
  ansible.builtin.set_fact:
    CLOUD_IMAGE_CHECKSUM_EQUAL: "{{ CLOUD_IMAGE_CHECKSUM.stdout == CLOUD_IMAGE_CHECKSUM_STAT.stat.checksum }}"
  when: CLOUD_IMAGE_CHECKSUM_STAT.stat.exists

- name: Download OVA file locally
  ansible.builtin.get_url:
    url: "{{ CLOUD_IMAGE_URL }}"
    dest: "{{ CLOUD_IMAGE_DESTINATION }}"
    checksum: "sha256:{{ CLOUD_IMAGE_CHECKSUM.stdout }}"
    mode: u=rw,g=r,o=r
  when: IMAGES_DIR.changed or not CLOUD_IMAGE_CHECKSUM_EQUAL|default(false)
