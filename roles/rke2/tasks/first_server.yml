---
- name: Create the RKE2 config dir
  ansible.builtin.file:
    state: directory
    path: "{{ RKE2_CONFIG_PATH }}"
    owner: root
    group: root
    mode: "0755"

- name: Set server taints
  ansible.builtin.set_fact:
    combined_node_taints: "{{ RKE2_SERVER_NODE_TAINTS }}"
  when: NODE_TYPE == "server"

- name: Copy rke2 config
  ansible.builtin.template:
    src: "rke2_{{ NODE_TYPE }}_config.yml.j2"
    dest: "{{ RKE2_CONFIG_PATH }}/config.yaml"
    owner: root
    group: root
    mode: "0600"
  notify: "RKE2 Config file changed"

- name: Copy Containerd Registry Configuration file
  ansible.builtin.template:
    src: "rke2_custom_registries.yaml.j2"
    dest: "{{ RKE2_CONFIG_PATH }}/registries.yaml"
    owner: root
    group: root
    mode: "0600"
  when: (RKE2_CUSTOM_REGISTRY_MIRRORS | length > 0 or RKE2_CUSTOM_REGISTRY_CONFIGS | length > 0)
  notify: "RKE2 Config file changed"

- name: Start RKE2 service on the first server
  ansible.builtin.systemd:
    name: "rke2-server.service"
    state: started
    enabled: true
  environment:
    RKE2_TOKEN: "{{ RKE2_TOKEN }}"
  notify: "RKE2 Service (re)started"

- name: Mask RKE2 agent service on the first server
  ansible.builtin.systemd:
    name: "rke2-agent.service"
    enabled: false
    masked: true

- name: Wait for the first server be ready - with CNI
  ansible.builtin.shell: |
    set -o pipefail
    {{ RKE2_DATA_PATH }}/bin/kubectl --kubeconfig {{ RKE2_CONFIG_PATH }}/rke2.yaml get nodes | grep "{{ inventory_hostname }}"
  args:
    executable: /bin/bash
  changed_when: false
  register: first_server
  until:
    '" Ready "  in first_server.stdout'
  retries: 40
  delay: 15

- name: Set an Active Server variable
  ansible.builtin.set_fact:
    active_server: "{{ inventory_hostname }}"
  run_once: true

- name: Get all nodes
  ansible.builtin.shell: |
    set -o pipefail
    {{ RKE2_DATA_PATH }}/bin/kubectl --kubeconfig {{ RKE2_CONFIG_PATH }}/rke2.yaml get nodes --no-headers | awk '{print $1}'
  args:
    executable: /bin/bash
  changed_when: false
  register: node_names
